
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

public class MainFrame extends javax.swing.JFrame {

    // Variables de estado de la aplicación
    private boolean sinConexion = false;
    private boolean cerrandoAplicacion;
    
    public ArrayList<Opcion> listaPutFiltrada = new ArrayList<>();
    public ArrayList<Opcion> listaCallFiltrada = new ArrayList<>();

    public MainFrame() {
        initComponents();
        
        // Coloreamos las tablas
        setCellRender(TablaContado);
        setCellRender(TablaFuturos);
        setCellRender(TablaOpcionesCALL);
        setCellRender(TablaOpcionesPUT);
        
        // Deshabilitamos inicialmente las opciones que no están disponibles
        opcionGuardar.setEnabled(false);
        botonAddPut.setEnabled(false);
        botonAddCall.setEnabled(false);
        
        // Permitimos selección simple en las tablas
        TablaContado.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        TablaFuturos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        TablaOpcionesCALL.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        TablaOpcionesPUT.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        // Hacemos invisible la ventana de las carteras y el botón de reconectar
        ventanaCartera.setVisible(false);
        botonReconectar.setVisible(false);
        
        // Centramos las ventanas en la pantalla
        setLocationRelativeTo(null);
        dialogoNuevaCartera.setLocationRelativeTo(null);
        
        setDate();
        Timer timDate = new Timer(20000, new ActionListener() { // 20 segundos
            @Override
            public void actionPerformed(ActionEvent evt) {
                setDate();
            }
        });
        timDate.start();

        CollectData();
        Timer timData = new Timer(180000, new ActionListener() { // 3 minutos
            @Override
            public void actionPerformed(ActionEvent evt) {
                CollectData();
            }
        });
        timData.start();
    }
    
    // Designar el CellRenderer a cada una de las columnas de la tabla
    public void setCellRender(JTable table) {
        Enumeration<TableColumn> en = table.getColumnModel().getColumns();
        while (en.hasMoreElements()) {
            TableColumn tc = en.nextElement();
            tc.setCellRenderer(new CellRenderer());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogoNuevaCartera = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        campoNombre = new javax.swing.JTextField();
        botonAceptarNuevaCartera = new javax.swing.JButton();
        botonCancelarNuevaCartera = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        Escritorio = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        Institucion = new javax.swing.JLabel();
        ULPGC = new javax.swing.JLabel();
        VentanaContado = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaContado = new javax.swing.JTable();
        VentanaFuturos = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaFuturos = new javax.swing.JTable();
        VentanaOpcionesPUT = new javax.swing.JInternalFrame();
        comboBoxFechasPut = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TablaOpcionesPUT = new javax.swing.JTable();
        botonAddPut = new javax.swing.JButton();
        VentanaOpcionesCALL = new javax.swing.JInternalFrame();
        comboBoxFechasCall = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablaOpcionesCALL = new javax.swing.JTable();
        botonAddCall = new javax.swing.JButton();
        ventanaCartera = new javax.swing.JInternalFrame();
        panelBotones = new javax.swing.JPanel();
        botonRemove = new javax.swing.JButton();
        botonClose = new javax.swing.JButton();
        gestorCarteras = new javax.swing.JTabbedPane();
        panelTotal = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        importe = new javax.swing.JLabel();
        valoracion = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ganancia = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        campoFecha = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        estado = new javax.swing.JLabel();
        botonReconectar = new javax.swing.JButton();
        BarraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        opcionNueva = new javax.swing.JMenuItem();
        opcionAbrir = new javax.swing.JMenuItem();
        opcionGuardar = new javax.swing.JMenuItem();
        separador = new javax.swing.JPopupMenu.Separator();
        opcionCerrar = new javax.swing.JMenuItem();

        dialogoNuevaCartera.setTitle("Crear nueva cartera");
        dialogoNuevaCartera.setResizable(false);
        dialogoNuevaCartera.setSize(new java.awt.Dimension(312, 200));

        jLabel3.setText("Introduzca un nombre para su cartera:");

        botonAceptarNuevaCartera.setText("Aceptar");
        botonAceptarNuevaCartera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarNuevaCarteraActionPerformed(evt);
            }
        });

        botonCancelarNuevaCartera.setText("Cancelar");
        botonCancelarNuevaCartera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarNuevaCarteraActionPerformed(evt);
            }
        });

        jLabel4.setText(".car");

        javax.swing.GroupLayout dialogoNuevaCarteraLayout = new javax.swing.GroupLayout(dialogoNuevaCartera.getContentPane());
        dialogoNuevaCartera.getContentPane().setLayout(dialogoNuevaCarteraLayout);
        dialogoNuevaCarteraLayout.setHorizontalGroup(
            dialogoNuevaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogoNuevaCarteraLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(dialogoNuevaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(dialogoNuevaCarteraLayout.createSequentialGroup()
                        .addComponent(botonAceptarNuevaCartera)
                        .addGap(67, 67, 67)
                        .addComponent(botonCancelarNuevaCartera))
                    .addGroup(dialogoNuevaCarteraLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(campoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        dialogoNuevaCarteraLayout.setVerticalGroup(
            dialogoNuevaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogoNuevaCarteraLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialogoNuevaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(dialogoNuevaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAceptarNuevaCartera)
                    .addComponent(botonCancelarNuevaCartera))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cartera de Opciones del IBEX35");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/euro.png")).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Escritorio.setBackground(new java.awt.Color(108, 148, 188));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Institucion.setText("<html>Universidad de Las Palmas de Gran Canaria<br>Escuela de Ingeniería Informática<br>Diseño de Interfaces de Usuario<br>Jose David Santana Rocha</html>");

        ULPGC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/LOGO_ULPGC.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(ULPGC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Institucion, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Institucion, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ULPGC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        VentanaContado.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        VentanaContado.setTitle("Contado/Spot");
        VentanaContado.setToolTipText("Precio de Contado/Spot");
        VentanaContado.setVisible(true);

        TablaContado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Último", "Diferencia(%)", "Anterior", "Máximo", "Mínimo", "Fecha", "Hora (Madrid)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaContado);

        javax.swing.GroupLayout VentanaContadoLayout = new javax.swing.GroupLayout(VentanaContado.getContentPane());
        VentanaContado.getContentPane().setLayout(VentanaContadoLayout);
        VentanaContadoLayout.setHorizontalGroup(
            VentanaContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
        );
        VentanaContadoLayout.setVerticalGroup(
            VentanaContadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        VentanaFuturos.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        VentanaFuturos.setTitle("Futuros (MINI) IBEX35");
        VentanaFuturos.setToolTipText("Futuros del (MINI)IBEX35");
        VentanaFuturos.setVisible(true);

        TablaFuturos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Vencimiento", "Vol. Compra", "P. Compra", "P. Venta", "Vol. Venta", "Último", "Volumen", "Apertura", "Máximo", "Mínimo", "Anterior", "Hora (Madrid)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TablaFuturos);

        javax.swing.GroupLayout VentanaFuturosLayout = new javax.swing.GroupLayout(VentanaFuturos.getContentPane());
        VentanaFuturos.getContentPane().setLayout(VentanaFuturosLayout);
        VentanaFuturosLayout.setHorizontalGroup(
            VentanaFuturosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE)
        );
        VentanaFuturosLayout.setVerticalGroup(
            VentanaFuturosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        VentanaOpcionesPUT.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        VentanaOpcionesPUT.setTitle("Opciones IBEX35 - PUT");
        VentanaOpcionesPUT.setToolTipText("Opciones PUT del IBEX35");
        VentanaOpcionesPUT.setVisible(true);

        comboBoxFechasPut.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas" }));
        comboBoxFechasPut.setToolTipText("Filtrar las opciones mostradas por una fecha de vencimiento.");
        comboBoxFechasPut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxFechasPutItemStateChanged(evt);
            }
        });

        jLabel2.setText("Fecha de Vencimiento:");

        TablaOpcionesPUT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Ejercicio", "Vol. Compra", "P. Compra", "P. Venta", "Vol. Venta", "Último", "Volumen", "Hora (Madrid)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(TablaOpcionesPUT);

        botonAddPut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        botonAddPut.setText("Añadir opción a la cartera");
        botonAddPut.setToolTipText("Añade la opción seleccionada a la cartera actual.");
        botonAddPut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAddPutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout VentanaOpcionesPUTLayout = new javax.swing.GroupLayout(VentanaOpcionesPUT.getContentPane());
        VentanaOpcionesPUT.getContentPane().setLayout(VentanaOpcionesPUTLayout);
        VentanaOpcionesPUTLayout.setHorizontalGroup(
            VentanaOpcionesPUTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, VentanaOpcionesPUTLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonAddPut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboBoxFechasPut, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
        );
        VentanaOpcionesPUTLayout.setVerticalGroup(
            VentanaOpcionesPUTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VentanaOpcionesPUTLayout.createSequentialGroup()
                .addGroup(VentanaOpcionesPUTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonAddPut, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(VentanaOpcionesPUTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboBoxFechasPut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        VentanaOpcionesCALL.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        VentanaOpcionesCALL.setTitle("Opciones IBEX35 - CALL");
        VentanaOpcionesCALL.setToolTipText("Opciones CALL del IBEX35");
        VentanaOpcionesCALL.setVisible(true);

        comboBoxFechasCall.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas" }));
        comboBoxFechasCall.setToolTipText("Filtrar las opciones mostradas por una fecha de vencimiento.");
        comboBoxFechasCall.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxFechasCallItemStateChanged(evt);
            }
        });

        jLabel1.setText("Fecha de Vencimiento:");

        TablaOpcionesCALL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Ejercicio", "Vol. Compra", "P. Compra", "P. Venta", "Vol. Venta", "Último", "Volumen", "Hora (Madrid)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TablaOpcionesCALL);

        botonAddCall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        botonAddCall.setText("Añadir opción a la cartera");
        botonAddCall.setToolTipText("Añade la opción seleccionada a la cartera actual.");
        botonAddCall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAddCallActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout VentanaOpcionesCALLLayout = new javax.swing.GroupLayout(VentanaOpcionesCALL.getContentPane());
        VentanaOpcionesCALL.getContentPane().setLayout(VentanaOpcionesCALLLayout);
        VentanaOpcionesCALLLayout.setHorizontalGroup(
            VentanaOpcionesCALLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, VentanaOpcionesCALLLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonAddCall)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboBoxFechasCall, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
        );
        VentanaOpcionesCALLLayout.setVerticalGroup(
            VentanaOpcionesCALLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VentanaOpcionesCALLLayout.createSequentialGroup()
                .addGroup(VentanaOpcionesCALLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonAddCall, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(VentanaOpcionesCALLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboBoxFechasCall, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        ventanaCartera.setTitle("Gestor de carteras");
        ventanaCartera.setVisible(true);

        botonRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/trash.png"))); // NOI18N
        botonRemove.setText("Eliminar opción de la cartera");
        botonRemove.setToolTipText("Elimina la opción seleccionada de la tabla actual.");
        botonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRemoveActionPerformed(evt);
            }
        });

        botonClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/close.png"))); // NOI18N
        botonClose.setText("Cerrar cartera");
        botonClose.setToolTipText("Cierra la cartera actual.");
        botonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonesLayout = new javax.swing.GroupLayout(panelBotones);
        panelBotones.setLayout(panelBotonesLayout);
        panelBotonesLayout.setHorizontalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonClose)
                .addGap(18, 18, 18)
                .addComponent(botonRemove)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBotonesLayout.setVerticalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBotonesLayout.createSequentialGroup()
                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonRemove, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(botonClose, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );

        gestorCarteras.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gestorCarterasStateChanged(evt);
            }
        });

        jLabel5.setText("Importe invertido:");

        jLabel6.setText("Valoración actual:");

        jLabel9.setText("<html><b>Ganancia total:</b></html>");

        javax.swing.GroupLayout panelTotalLayout = new javax.swing.GroupLayout(panelTotal);
        panelTotal.setLayout(panelTotalLayout);
        panelTotalLayout.setHorizontalGroup(
            panelTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTotalLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(panelTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(panelTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTotalLayout.createSequentialGroup()
                        .addComponent(importe, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ganancia, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(valoracion, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(307, Short.MAX_VALUE))
        );
        panelTotalLayout.setVerticalGroup(
            panelTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTotalLayout.createSequentialGroup()
                .addGroup(panelTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(importe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ganancia, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(valoracion, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout ventanaCarteraLayout = new javax.swing.GroupLayout(ventanaCartera.getContentPane());
        ventanaCartera.getContentPane().setLayout(ventanaCarteraLayout);
        ventanaCarteraLayout.setHorizontalGroup(
            ventanaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(gestorCarteras)
            .addComponent(panelBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelTotal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ventanaCarteraLayout.setVerticalGroup(
            ventanaCarteraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ventanaCarteraLayout.createSequentialGroup()
                .addComponent(panelBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gestorCarteras, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout EscritorioLayout = new javax.swing.GroupLayout(Escritorio);
        Escritorio.setLayout(EscritorioLayout);
        EscritorioLayout.setHorizontalGroup(
            EscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EscritorioLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(EscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EscritorioLayout.createSequentialGroup()
                        .addComponent(VentanaContado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EscritorioLayout.createSequentialGroup()
                        .addGroup(EscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VentanaFuturos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(EscritorioLayout.createSequentialGroup()
                                .addComponent(VentanaOpcionesPUT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(VentanaOpcionesCALL)))
                        .addGap(4, 4, 4)))
                .addContainerGap())
            .addGroup(EscritorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ventanaCartera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        EscritorioLayout.setVerticalGroup(
            EscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EscritorioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VentanaContado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VentanaFuturos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VentanaOpcionesPUT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VentanaOpcionesCALL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ventanaCartera)
                .addContainerGap())
        );
        Escritorio.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Escritorio.setLayer(VentanaContado, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Escritorio.setLayer(VentanaFuturos, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Escritorio.setLayer(VentanaOpcionesPUT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Escritorio.setLayer(VentanaOpcionesCALL, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Escritorio.setLayer(ventanaCartera, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        campoFecha.setEditable(false);

        jLabel7.setText("<html><b>Estado:</b></html>");

        estado.setText("Cartera sin cargar");

        botonReconectar.setText("Reconectar");
        botonReconectar.setToolTipText("Intentar realizar una conexión a los servidores.");
        botonReconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonReconectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(estado, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonReconectar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(campoFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonReconectar)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(campoFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(estado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        menuArchivo.setText("Archivo");

        opcionNueva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/new.png"))); // NOI18N
        opcionNueva.setText("Nueva cartera");
        opcionNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionNuevaActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionNueva);

        opcionAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/open.png"))); // NOI18N
        opcionAbrir.setText("Abrir cartera");
        opcionAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionAbrir);

        opcionGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        opcionGuardar.setText("Guardar cartera");
        opcionGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionGuardar);
        menuArchivo.add(separador);

        opcionCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png"))); // NOI18N
        opcionCerrar.setText("Cerrar");
        opcionCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCerrarActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionCerrar);

        BarraMenu.add(menuArchivo);

        setJMenuBar(BarraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Escritorio)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Escritorio))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cerrandoAplicacion = true;
        boolean cancelado = false;
        int numeroCarteras = gestorCarteras.getComponentCount();
        while (numeroCarteras > 0){
            Cartera c = (Cartera) gestorCarteras.getComponentAt(0);
            // Comprobamos si se han producido cambios en esa cartera
            if (c.checkChanges()) {
                Object[] textoBotones = {"Guardar", "No guardar", "Cancelar"};
                int retorno = JOptionPane.showOptionDialog(null,
                        "¿Desea guardar los cambios realizados en "
                            + c.getWalletName() 
                            + "?", "Salir",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, textoBotones, textoBotones[2]);
                if (retorno == 0) {
                    // Guardamos los cambios en la cartera
                    c.save();
                    gestorCarteras.remove(c);
                    numeroCarteras--;
                }
                if (retorno == 1) {
                    gestorCarteras.remove(c);
                    numeroCarteras--;
                }
                if (retorno == 2) {
                    // Se cancela cerrar
                    cancelado = true;
                    break;
                }
            } else {
                gestorCarteras.remove(c);
                numeroCarteras--;
            }
            /* else {
                int retorno = JOptionPane.showConfirmDialog(null,
                        "¿Realmente desea salir?", "Salir",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);
                if (retorno == 0) {
                    System.exit(0);
                }
            }*/
        }
        if (!cancelado){
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing
    
    private void comboBoxFechasPutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxFechasPutItemStateChanged
        if (comboBoxFechasPut.getItemCount() > 1) {
            int nOpciones = opciones.listaPut.size();
            listaPutFiltrada.clear();

            String fechaEscogida = (String) comboBoxFechasPut.getSelectedItem();

            int coincidencias = 0;
            for (int i = 0; i < nOpciones; i++) {
                Opcion opcionPut = opciones.listaPut.get(i);
                if (fechaEscogida.equals("Todas") || fechaEscogida.equals(opcionPut.Vencimiento)) {
                    coincidencias++;
                }
            }
            DefaultTableModel tableModelPut = (DefaultTableModel) TablaOpcionesPUT.getModel();
            tableModelPut.setRowCount(coincidencias);

            int fila = 0; // Fila de la tabla en la que introducir los datos
            for (int i = 0; i < nOpciones; i++) {
                Opcion opcionPut = opciones.listaPut.get(i);
                if (fechaEscogida.equals("Todas") || fechaEscogida.equals(opcionPut.Vencimiento)) {
                    TablaOpcionesPUT.setValueAt(opcionPut.Ejercicio, fila, 0);
                    TablaOpcionesPUT.setValueAt(opcionPut.Compra_Vol, fila, 1);
                    TablaOpcionesPUT.setValueAt(opcionPut.Compra_Precio, fila, 2);
                    TablaOpcionesPUT.setValueAt(opcionPut.Venta_Precio, fila, 3);
                    TablaOpcionesPUT.setValueAt(opcionPut.Venta_Vol, fila, 4);
                    TablaOpcionesPUT.setValueAt(opcionPut.Ultimo, fila, 5);
                    TablaOpcionesPUT.setValueAt(opcionPut.Volumen, fila, 6);
                    TablaOpcionesPUT.setValueAt(opcionPut.Hora, fila, 7);
                    listaPutFiltrada.add(opcionPut);
                    fila++;
                }
            }
        }
    }//GEN-LAST:event_comboBoxFechasPutItemStateChanged

    private void comboBoxFechasCallItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxFechasCallItemStateChanged
        if (comboBoxFechasCall.getItemCount() > 1) {
            int nOpciones = opciones.listaCall.size();
            listaCallFiltrada.clear();

            String fechaEscogida = (String) comboBoxFechasCall.getSelectedItem();

            int coincidencias = 0;
            for (int i = 0; i < nOpciones; i++) {
                Opcion opcionCall = opciones.listaCall.get(i);
                if (fechaEscogida.equals("Todas") || fechaEscogida.equals(opcionCall.Vencimiento)) {
                    coincidencias++;
                }
            }
            DefaultTableModel tableModelCall = (DefaultTableModel) TablaOpcionesCALL.getModel();
            tableModelCall.setRowCount(coincidencias);

            int fila = 0; // Fila de la tabla en la que introducir los datos
            for (int i = 0; i < nOpciones; i++) {
                Opcion opcionCall = opciones.listaCall.get(i);
                if (fechaEscogida.equals("Todas") || fechaEscogida.equals(opcionCall.Vencimiento)) {
                    TablaOpcionesCALL.setValueAt(opcionCall.Ejercicio, fila, 0);
                    TablaOpcionesCALL.setValueAt(opcionCall.Compra_Vol, fila, 1);
                    TablaOpcionesCALL.setValueAt(opcionCall.Compra_Precio, fila, 2);
                    TablaOpcionesCALL.setValueAt(opcionCall.Venta_Precio, fila, 3);
                    TablaOpcionesCALL.setValueAt(opcionCall.Venta_Vol, fila, 4);
                    TablaOpcionesCALL.setValueAt(opcionCall.Ultimo, fila, 5);
                    TablaOpcionesCALL.setValueAt(opcionCall.Volumen, fila, 6);
                    TablaOpcionesCALL.setValueAt(opcionCall.Hora, fila, 7);
                    listaCallFiltrada.add(opcionCall);
                    fila++;
                }
            }
        }
    }//GEN-LAST:event_comboBoxFechasCallItemStateChanged

    private void opcionAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAbrirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(null);
        FiltroCartera filtro = new FiltroCartera();
        fileChooser.addChoosableFileFilter(filtro);
        fileChooser.setFileFilter(filtro);
        int retorno = fileChooser.showOpenDialog(this);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (file.exists()) {
                // Hacemos visible la ventana de carteras
                ventanaCartera.setVisible(true);

                // Leemos el archivo de cartera
                Charset charset = Charset.forName("US-ASCII");
                try (BufferedReader reader = Files.newBufferedReader(Paths.get(file.getCanonicalPath()), charset)) {
                    // Leemos el nombre de la cartera
                    String nombre = reader.readLine();
                    Boolean cargada = false;
                    for (int i = 0; i < gestorCarteras.getComponentCount(); i++) {
                        // Comprobamos el nombre de las carteras cargadas en el gestor
                        Cartera c = (Cartera) gestorCarteras.getComponentAt(i);
                        String n = c.getWalletName();
                        if (nombre.equals(n)) {
                            // La cartera ya está cargada
                            cargada = true;
                            break;
                        }
                    }
                    if (!cargada) {
                        estado.setText("Cargando cartera...");
                        String ubicacion = file.getAbsolutePath();
                        Cartera cartera = new Cartera(nombre, ubicacion);
                        gestorCarteras.add(nombre, cartera);
                        gestorCarteras.setSelectedIndex(gestorCarteras.getComponentCount() - 1);

                        String line;
                        // Leemos el resto del archivo para rellenar las filas de la tabla
                        while ((line = reader.readLine()) != null) {
                            cartera.addRow(line);
                        }

                        if (cartera.deleteOldDates()) {
                            JOptionPane.showMessageDialog(null,
                                    "En la cartera cargada habían opciones cuya fecha de vencimiento ha caducado."
                                    + "\nHan sido eliminadas de la cartera.",
                                    "Advertencia", JOptionPane.INFORMATION_MESSAGE);
                        }
                        // Calculamos el importe, la valoracion y el beneficio
                        if (!sinConexion) {
                            cartera.calculate(importe, valoracion, ganancia);
                        }
                        estado.setText("Listo");
                    } else {
                        JOptionPane.showMessageDialog(null,
                                "La cartera seleccionada ya ha sido cargada.",
                                "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (IOException x) {
                    System.err.format("IOException: %s%n", x);
                }
                opcionGuardar.setEnabled(true);
                botonAddPut.setEnabled(true);
                botonAddCall.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(null,
                        "No existe una cartera con ese nombre en el directorio especificado.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_opcionAbrirActionPerformed

    private void opcionNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionNuevaActionPerformed
        dialogoNuevaCartera.setVisible(true);
    }//GEN-LAST:event_opcionNuevaActionPerformed

    private void botonCancelarNuevaCarteraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarNuevaCarteraActionPerformed
        dialogoNuevaCartera.setVisible(false);
    }//GEN-LAST:event_botonCancelarNuevaCarteraActionPerformed

    private void botonAceptarNuevaCarteraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarNuevaCarteraActionPerformed
        // Eliminamos espacios al comienzo y al final del nombre introducido
        String nombre = campoNombre.getText().trim();
        // Comprobamos que esté compuesto de caracteres válidos
        if (nombre.matches("[a-zA-Z0-9\\s]+")){
            File archivo = new File(nombre + ".car");
            JFileChooser fileChooser = new JFileChooser() {
                @Override
                public void approveSelection() {
                    File f = getSelectedFile();
                    if (f.exists() && getDialogType() == SAVE_DIALOG) {
                        int result = JOptionPane.showConfirmDialog(this,
                                "El fichero seleccionado ya existe, ¿desea sobreescribirlo?",
                                "Sobreescribir fichero", JOptionPane.YES_NO_CANCEL_OPTION);
                        switch (result) {
                            case JOptionPane.YES_OPTION:
                                super.approveSelection();
                                return;
                            case JOptionPane.NO_OPTION:
                                return;
                            case JOptionPane.CLOSED_OPTION:
                                return;
                            case JOptionPane.CANCEL_OPTION:
                                cancelSelection();
                                return;
                        }
                    }
                    super.approveSelection();
                }
            };
            fileChooser.setSelectedFile(archivo);
            fileChooser.setCurrentDirectory(null);
            FiltroCartera filtro = new FiltroCartera();
            fileChooser.addChoosableFileFilter(filtro);
            fileChooser.setFileFilter(filtro);
            fileChooser.setDialogTitle("Seleccione una ubicación");   
            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                String ubicacion = fileToSave.getAbsolutePath();
                String extension = ubicacion.substring(ubicacion.lastIndexOf(".") + 1, ubicacion.length());
                if (!extension.equals("car")){
                    ubicacion = ubicacion + ".car";
                }
                PrintWriter writer;
                try {
                    // Guardamos el fichero con el nombre introducido
                    writer = new PrintWriter(ubicacion, "UTF-8");
                    writer.println(nombre);
                    writer.close();
                } catch (FileNotFoundException | UnsupportedEncodingException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialogoNuevaCartera.setVisible(false);

                ventanaCartera.setVisible(true);
                Cartera cartera = new Cartera(nombre, ubicacion);
                gestorCarteras.add(nombre, cartera);
                gestorCarteras.setSelectedIndex(gestorCarteras.getComponentCount() - 1);
            }
        } else {
            JOptionPane.showMessageDialog(null, 
                    "Introduzca un nombre válido para la nueva cartera.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        campoNombre.setText("");
        opcionGuardar.setEnabled(true);
        botonAddPut.setEnabled(true);
        botonAddCall.setEnabled(true);
    }//GEN-LAST:event_botonAceptarNuevaCarteraActionPerformed

    private void botonAddPutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAddPutActionPerformed
        // Obtenemos la opción que se desea añadir a la cartera
        int row = TablaOpcionesPUT.getSelectedRow();
        Opcion opcion = listaPutFiltrada.get(row);
        
        // Comprobamos que la opción tenga un precio de compra válido
        if (opcion.Compra_Precio.equals("-  ")){
            JOptionPane.showMessageDialog(null, 
                    "La opción seleccionada no tiene precio de compra. \nNo se puede añadir a la cartera.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (opcion.Venta_Precio.equals("-  ")){
            JOptionPane.showMessageDialog(null, 
                    "La opción seleccionada no tiene precio de venta. \nNo se puede añadir a la cartera.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                Cartera cartera = (Cartera)gestorCarteras.getSelectedComponent();
                int fila = cartera.include(opcion);
                if (fila == -1){
                    String fechaActual = campoFecha.getText();
                    fechaActual = adjustDate(fechaActual);
                    String datos = "1 " + opcion.Tipo + " " + opcion.Vencimiento.replaceAll(" ", "-") + " " + opcion.Ejercicio.trim() + " " + fechaActual + " " + opcion.Venta_Precio;
                    // Añadimos la información a la cartera actual
                    cartera.addRow(datos);
                    cartera.calculate(importe, valoracion, ganancia);
                } else {
                    cartera.increaseCount(fila);
                    cartera.calculate(importe, valoracion, ganancia);
                }
                cartera.setChanges(true);
            }
        }
    }//GEN-LAST:event_botonAddPutActionPerformed

    private void botonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRemoveActionPerformed
        Cartera cartera = (Cartera)gestorCarteras.getSelectedComponent();
        if (cartera.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, 
                    "Debe seleccionar una opción de la cartera.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int retorno = JOptionPane.showConfirmDialog(null,
                    "¿Desea eliminar la opción seleccionada de " 
                            + cartera.getWalletName() 
                            + "?", "Eliminar opción de la cartera",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (retorno == 0) {
                cartera.removeRow(cartera.getSelectedRow());
                cartera.calculate(importe, valoracion, ganancia);
            }
            cartera.setChanges(true);
        }
    }//GEN-LAST:event_botonRemoveActionPerformed

    private void opcionGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardarActionPerformed
        Cartera cartera = (Cartera) gestorCarteras.getSelectedComponent();
        int retorno = JOptionPane.showConfirmDialog(null,
                "¿Desea guardar los cambios de "
                + cartera.getWalletName()
                + "?", "Guardar cambios de la cartera",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (retorno == 0) {
            cartera.save();
            cartera.setChanges(false);
        }
    }//GEN-LAST:event_opcionGuardarActionPerformed

    private void botonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCloseActionPerformed
        Cartera cartera = (Cartera) gestorCarteras.getSelectedComponent();
        if (cartera.checkChanges()){
            Object[] textoBotones = {"Guardar", "No guardar", "Cancelar"};
            int retorno = JOptionPane.showOptionDialog(null,
                    "¿Desea guardar los cambios realizados en "
                    + cartera.getWalletName()
                    + "?", "Cerrar cartera",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, textoBotones, textoBotones[2]);
            if (retorno == 0) {
                // Guardamos los cambios en la cartera y la cerramos
                cartera.save();
                gestorCarteras.remove(cartera);
            }
            if (retorno == 1) {
                // Cerramos la cartera
                gestorCarteras.remove(cartera);
            }
            if (gestorCarteras.getComponentCount() == 0){
                ventanaCartera.setVisible(false);
                opcionGuardar.setEnabled(false);
                botonAddPut.setEnabled(false);
                botonAddCall.setEnabled(false);
            }
        } else {
            gestorCarteras.remove(cartera);
            if (gestorCarteras.getComponentCount() == 0){
                ventanaCartera.setVisible(false);
                opcionGuardar.setEnabled(false);
                botonAddPut.setEnabled(false);
                botonAddCall.setEnabled(false);
                estado.setText("Cartera sin cargar");
            }
        }
    }//GEN-LAST:event_botonCloseActionPerformed

    private void botonAddCallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAddCallActionPerformed
        // Obtenemos la opción que se desea añadir a la cartera
        int row = TablaOpcionesCALL.getSelectedRow();
        Opcion opcion = listaCallFiltrada.get(row);
        
        // Comprobamos que la opción tenga un precio de compra válido
        if (opcion.Compra_Precio.equals("-  ")){
            JOptionPane.showMessageDialog(null, 
                    "La opción seleccionada no tiene precio de compra. \nNo se puede añadir a la cartera.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (opcion.Venta_Precio.equals("-  ")){
            JOptionPane.showMessageDialog(null, 
                    "La opción seleccionada no tiene precio de venta. \nNo se puede añadir a la cartera.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                Cartera cartera = (Cartera)gestorCarteras.getSelectedComponent();
                int fila = cartera.include(opcion);
                if (fila == -1){
                    String fechaActual = campoFecha.getText();
                    fechaActual = adjustDate(fechaActual);
                    String datos = "1 " + opcion.Tipo + " " + opcion.Vencimiento.replaceAll(" ", "-") + " " + opcion.Ejercicio.trim() + " " + fechaActual + " " + opcion.Venta_Precio;
                    // Añadimos la información a la cartera actual
                    cartera.addRow(datos);
                    cartera.calculate(importe, valoracion, ganancia);
                } else {
                    cartera.increaseCount(fila);
                    cartera.calculate(importe, valoracion, ganancia);
                }
                cartera.setChanges(true);
            }
        }
    }//GEN-LAST:event_botonAddCallActionPerformed

    private void opcionCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCerrarActionPerformed
        cerrandoAplicacion = true;
        boolean cancelado = false;
        int numeroCarteras = gestorCarteras.getComponentCount();
        while (numeroCarteras > 0){
            Cartera c = (Cartera) gestorCarteras.getComponentAt(0);
            // Comprobamos si se han producido cambios en esa cartera
            if (c.checkChanges()) {
                Object[] textoBotones = {"Guardar", "No guardar", "Cancelar"};
                int retorno = JOptionPane.showOptionDialog(null,
                        "¿Desea guardar los cambios realizados en "
                            + c.getWalletName() 
                            + "?", "Salir",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, textoBotones, textoBotones[2]);
                if (retorno == 0) {
                    // Guardamos los cambios en la cartera
                    c.save();
                    gestorCarteras.remove(c);
                    numeroCarteras--;
                }
                if (retorno == 1) {
                    gestorCarteras.remove(c);
                    numeroCarteras--;
                }
                if (retorno == 2) {
                    // Se cancela cerrar
                    cancelado = true;
                    break;
                }
            } else {
                gestorCarteras.remove(c);
                numeroCarteras--;
            }
        }
        if (!cancelado){
            System.exit(0);
        }
    }//GEN-LAST:event_opcionCerrarActionPerformed
    
    private void gestorCarterasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gestorCarterasStateChanged
        if (!cerrandoAplicacion) {
            Cartera cartera = (Cartera) gestorCarteras.getSelectedComponent();
            if (cartera != null){
                cartera.calculate(importe, valoracion, ganancia);
            }
        }
    }//GEN-LAST:event_gestorCarterasStateChanged

    private void botonReconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonReconectarActionPerformed
        CollectData();
    }//GEN-LAST:event_botonReconectarActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar BarraMenu;
    private javax.swing.JDesktopPane Escritorio;
    private javax.swing.JLabel Institucion;
    private javax.swing.JTable TablaContado;
    private javax.swing.JTable TablaFuturos;
    private javax.swing.JTable TablaOpcionesCALL;
    private javax.swing.JTable TablaOpcionesPUT;
    private javax.swing.JLabel ULPGC;
    private javax.swing.JInternalFrame VentanaContado;
    private javax.swing.JInternalFrame VentanaFuturos;
    private javax.swing.JInternalFrame VentanaOpcionesCALL;
    private javax.swing.JInternalFrame VentanaOpcionesPUT;
    private javax.swing.JButton botonAceptarNuevaCartera;
    private javax.swing.JButton botonAddCall;
    private javax.swing.JButton botonAddPut;
    private javax.swing.JButton botonCancelarNuevaCartera;
    private javax.swing.JButton botonClose;
    private javax.swing.JButton botonReconectar;
    private javax.swing.JButton botonRemove;
    private javax.swing.JTextField campoFecha;
    private javax.swing.JTextField campoNombre;
    private javax.swing.JComboBox comboBoxFechasCall;
    private javax.swing.JComboBox comboBoxFechasPut;
    private javax.swing.JDialog dialogoNuevaCartera;
    private javax.swing.JLabel estado;
    private javax.swing.JLabel ganancia;
    private javax.swing.JTabbedPane gestorCarteras;
    private javax.swing.JLabel importe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuItem opcionAbrir;
    private javax.swing.JMenuItem opcionCerrar;
    private javax.swing.JMenuItem opcionGuardar;
    private javax.swing.JMenuItem opcionNueva;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelTotal;
    private javax.swing.JPopupMenu.Separator separador;
    private javax.swing.JLabel valoracion;
    private javax.swing.JInternalFrame ventanaCartera;
    // End of variables declaration//GEN-END:variables

    private MEFF_Contado contado = new MEFF_Contado();
    private MEFF_Futuros futuros = new MEFF_Futuros();
    private MEFF_Opciones opciones = new MEFF_Opciones();

    private void setDate() {
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy  HH:mm ");
        String formatedDate = dateFormat.format(date);
        formatedDate = formatedDate.concat(" (local)");
        campoFecha.setText(formatedDate);
    }

    private Float toFloat(String texto) {
        texto = texto.replace(".", "");
        texto = texto.replace(",", ".");
        return Float.valueOf(texto);
    }

    private void CollectData() {
        //Notificaciones.setText("Recolectando datos ....");   
        // Actualiza la tabla de contado
        if (!contado.getSpot()){
            JOptionPane.showMessageDialog(null,
                            "No se ha podido establecer la conexión con los servidores.\nVerifique su conexión a Internet e inténtelo más tarde.",
                            "Error de conexión", JOptionPane.ERROR_MESSAGE);
            botonReconectar.setVisible(true);
            botonAddPut.setEnabled(false);
            botonAddCall.setEnabled(false);
            botonRemove.setEnabled(false);
            opcionAbrir.setEnabled(false);
            opcionNueva.setEnabled(false);
            comboBoxFechasCall.setEnabled(false);
            comboBoxFechasPut.setEnabled(false);
            estado.setText("Sin conexión");
            sinConexion = true;
            return;
        } else {
            if (gestorCarteras.getComponentCount() > 0){
                estado.setText("Listo");
                botonAddPut.setEnabled(true);
                botonAddCall.setEnabled(true);
                botonRemove.setEnabled(true);
            } else {
                estado.setText("Cartera sin cargar");
            }
            botonReconectar.setVisible(false);
            opcionAbrir.setEnabled(true);
            opcionNueva.setEnabled(true);
            comboBoxFechasCall.setEnabled(true);
            comboBoxFechasPut.setEnabled(true);
            sinConexion = false;
        }
        
        TableModel model = TablaContado.getModel();
        TablaContado.setValueAt(contado.Spot, 0, 0);
        //TablaContado.setValueAt(contado.Diferencia, 0, 1);
        TablaContado.setValueAt(contado.Anterior, 0, 2);
        TablaContado.setValueAt(contado.Maximo, 0, 3);
        TablaContado.setValueAt(contado.Minimo, 0, 4);
        TablaContado.setValueAt(contado.Fecha, 0, 5);
        TablaContado.setValueAt(contado.Hora, 0, 6);

        Float diferencia = toFloat(contado.Diferencia);
        if (diferencia > 0) {
            model.setValueAt("<html><font color='green'>" + diferencia + "</font></html>", 0, 1);
        } else if (diferencia < 0) {
            model.setValueAt("<html><font color='red'>" + diferencia + "</font></html>", 0, 1);
        } else {
            model.setValueAt("<html><font color='black'>" + diferencia + "</font></html>", 0, 1);
        }

        futuros.getFutures();
        int nfuturos = futuros.Futuros.size();
        
        DefaultTableModel tablemodel = (DefaultTableModel) TablaFuturos.getModel();
        tablemodel.setRowCount(nfuturos);

        for (int i = 0; i < nfuturos; i++) {
            Futuro f = futuros.Futuros.get(i);
            TablaFuturos.setValueAt(f.Vencimiento, i, 0);
            TablaFuturos.setValueAt(f.Compra_Vol, i, 1);
            TablaFuturos.setValueAt(f.Compra_Precio, i, 2);
            TablaFuturos.setValueAt(f.Venta_Precio, i, 3);
            TablaFuturos.setValueAt(f.Venta_Vol, i, 4);
            TablaFuturos.setValueAt(f.Ultimo, i, 5);
            TablaFuturos.setValueAt(f.Volumen, i, 6);
            TablaFuturos.setValueAt(f.Apertura, i, 7);
            TablaFuturos.setValueAt(f.Maximo, i, 8);
            TablaFuturos.setValueAt(f.Minimo, i, 9);
            TablaFuturos.setValueAt(f.Anterior, i, 10);
            TablaFuturos.setValueAt(f.Hora, i, 11);
        }
        //Notificaciones.setText("Datos disponibles");
        
        // --------------------------------------------------------------------------
        
        // Opciones PUT
        opciones.getOptions();
        int nOpciones = opciones.listaPut.size();
        DefaultTableModel tableModelPut = (DefaultTableModel) TablaOpcionesPUT.getModel();
        tableModelPut.setRowCount(nOpciones);
        String [] fechas = new String[0];
        
        for (int i = 0; i < nOpciones; i++) {
            Opcion opcionPut = opciones.listaPut.get(i);
            TablaOpcionesPUT.setValueAt(opcionPut.Ejercicio, i, 0);
            TablaOpcionesPUT.setValueAt(opcionPut.Compra_Vol, i, 1);
            TablaOpcionesPUT.setValueAt(opcionPut.Compra_Precio, i, 2);
            TablaOpcionesPUT.setValueAt(opcionPut.Venta_Precio, i, 3);
            TablaOpcionesPUT.setValueAt(opcionPut.Venta_Vol, i, 4);
            TablaOpcionesPUT.setValueAt(opcionPut.Ultimo, i, 5);
            TablaOpcionesPUT.setValueAt(opcionPut.Volumen, i, 6);
            TablaOpcionesPUT.setValueAt(opcionPut.Hora, i, 7);
            
            // Inicializamos la lista filtrada
            listaPutFiltrada.add(opcionPut);
            
            // Comprobamos fechas para incluirlas al comboBox
            Boolean aparece = false;
            for (String fecha : fechas) {
                if (opcionPut.Vencimiento.equals(fecha)) {
                    aparece = true;
                }
            }
            if (!aparece){
                if (fechas.length == 0){
                    fechas = new String[] {opcionPut.Vencimiento};
                } else {
                    String [] fechasAux = new String[fechas.length + 1];
                    System.arraycopy(fechas, 1, fechasAux, 1, fechas.length - 1);
                    fechasAux[fechas.length] = opcionPut.Vencimiento;
                    fechas = fechasAux;
                }
            }
        }
        
        // Limpiamos el comboBox y lo actualizamos con las fechas
        comboBoxFechasPut.removeAllItems();
        comboBoxFechasPut.addItem("Todas");
        // Rellenamos el comboBox con las fechas de vencimiento
        for (String fecha : fechas) {
            comboBoxFechasPut.addItem(fecha);
        }
        comboBoxFechasPut.removeItemAt(1); // Borramos el item vacio
        
        // Opciones CALL
        nOpciones = opciones.listaCall.size();
        DefaultTableModel tableModelCall = (DefaultTableModel) TablaOpcionesCALL.getModel();
        tableModelCall.setRowCount(nOpciones);
        fechas = new String[0];
        
        for (int i = 0; i < nOpciones; i++) {
            Opcion opcionCall = opciones.listaCall.get(i);
            TablaOpcionesCALL.setValueAt(opcionCall.Ejercicio, i, 0);
            TablaOpcionesCALL.setValueAt(opcionCall.Compra_Vol, i, 1);
            TablaOpcionesCALL.setValueAt(opcionCall.Compra_Precio, i, 2);
            TablaOpcionesCALL.setValueAt(opcionCall.Venta_Precio, i, 3);
            TablaOpcionesCALL.setValueAt(opcionCall.Venta_Vol, i, 4);
            TablaOpcionesCALL.setValueAt(opcionCall.Ultimo, i, 5);
            TablaOpcionesCALL.setValueAt(opcionCall.Volumen, i, 6);
            TablaOpcionesCALL.setValueAt(opcionCall.Hora, i, 7);
            
            // Inicializamos la lista filtrada
            listaCallFiltrada.add(opcionCall);
            
            Boolean aparece = false;
            for (String fecha : fechas) {
                if (opcionCall.Vencimiento.equals(fecha)) {
                    aparece = true;
                }
            }
            if (!aparece){
                if (fechas.length == 0){
                    fechas = new String[] {opcionCall.Vencimiento};
                } else {
                    String [] fechasAux = new String[fechas.length + 1];
                    System.arraycopy(fechas, 1, fechasAux, 1, fechas.length - 1);
                    fechasAux[fechas.length] = opcionCall.Vencimiento;
                    fechas = fechasAux;
                }
            }
        }
        
        // Limpiamos el comboBox y lo actualizamos con las fechas
        comboBoxFechasCall.removeAllItems();
        comboBoxFechasCall.addItem("Todas");
        // Rellenamos el comboBox con las fechas de vencimiento
        for (String fecha : fechas) {
            comboBoxFechasCall.addItem(fecha);
        }
        comboBoxFechasCall.removeItemAt(1); // Borramos el item vacio
    }
    
    public String adjustDate(String date){
        String fecha = date.substring(0, date.indexOf(" "));
        String mes = fecha.split("/")[1];
        if (mes.equals("01")){
            mes = "ene";
        }
        if (mes.equals("02")){
            mes = "feb";
        }
        if (mes.equals("03")){
            mes = "mar";
        }
        if (mes.equals("04")){
            mes = "abr";
        }
        if (mes.equals("05")){
            mes = "may";
        }
        if (mes.equals("06")){
            mes = "jun";
        }
        if (mes.equals("07")){
            mes = "jul";
        }
        if (mes.equals("08")){
            mes = "ago";
        }
        if (mes.equals("09")){
            mes = "sep";
        }
        if (mes.equals("10")){
            mes = "oct";
        }
        if (mes.equals("11")){
            mes = "nov";
        }
        if (mes.equals("12")){
            mes = "dic";
        }
        fecha = fecha.split("/")[0] + "-" + mes + "-" + fecha.split("/")[2];
        return fecha;
    }
}
